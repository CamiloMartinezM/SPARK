diff --git a/src/FLAME/FLAME.py b/src/FLAME/FLAME.py
index 9c794ed..0dcfd1f 100755
--- a/src/FLAME/FLAME.py
+++ b/src/FLAME/FLAME.py
@@ -13,6 +13,7 @@
 # For comments or questions, please email us at deca@tue.mpg.de
 # For commercial licensing contact, please contact ps-license@tuebingen.mpg.de
 
+from os.path import join
 import torch
 import torch.nn as nn
 import numpy as np
@@ -47,10 +48,13 @@ class FLAME(nn.Module):
     Given flame parameters this class generates a differentiable FLAME function
     which outputs the a mesh and 2D/3D facial landmarks
     """
-    def __init__(self, flame_model_path='assets/FLAME2020/generic_model.pkl', 
-                 flame_lmk_embedding_path='assets/landmark_embedding.npy', n_shape=300, n_exp=50):
+    def __init__(self, assets_path="assets/", n_shape=300, n_exp=50):
         super(FLAME, self).__init__()
 
+        flame_model_path = join(assets_path, "FLAME2020/generic_model.pkl")
+        flame_lmk_embedding_path = join(assets_path, "landmark_embedding.npy")
+        flame_lmk_embedding_path_mp = join(assets_path, "mediapipe_landmark_embedding/mediapipe_landmark_embedding.npz")
+
         with open(flame_model_path, 'rb') as f:
             ss = pickle.load(f, encoding='latin1')
             flame_model = Struct(**ss)
@@ -78,8 +82,8 @@ class FLAME(nn.Module):
         self.register_buffer('lbs_weights', to_tensor(to_np(flame_model.weights), dtype=self.dtype))
 
 
-        self.register_buffer('l_eyelid', torch.from_numpy(np.load(f'assets/l_eyelid.npy')).to(self.dtype)[None])
-        self.register_buffer('r_eyelid', torch.from_numpy(np.load(f'assets/r_eyelid.npy')).to(self.dtype)[None])
+        self.register_buffer('l_eyelid', torch.from_numpy(np.load(join(assets_path, "l_eyelid.npy"))).to(self.dtype)[None])
+        self.register_buffer('r_eyelid', torch.from_numpy(np.load(join(assets_path, "r_eyelid.npy"))).to(self.dtype)[None])
 
 
         # Fixing Eyeball and neck rotation
@@ -108,7 +112,7 @@ class FLAME(nn.Module):
         self.register_buffer('neck_kin_chain', torch.stack(neck_kin_chain))
 
 
-        lmk_embeddings_mp = np.load("assets/mediapipe_landmark_embedding/mediapipe_landmark_embedding.npz")
+        lmk_embeddings_mp = np.load(flame_lmk_embedding_path_mp)
         self.register_buffer('mp_lmk_faces_idx', torch.from_numpy(lmk_embeddings_mp['lmk_face_idx'].astype('int32')).long())
         self.register_buffer('mp_lmk_bary_coords', torch.from_numpy(lmk_embeddings_mp['lmk_b_coords']).to(self.dtype))
 
diff --git a/src/renderer/renderer.py b/src/renderer/renderer.py
index 889db09..cbcd0d3 100755
--- a/src/renderer/renderer.py
+++ b/src/renderer/renderer.py
@@ -1,3 +1,4 @@
+from os.path import join
 import numpy as np
 import torch
 import torch.nn as nn
@@ -47,10 +48,12 @@ def keep_vertices_and_update_faces(faces, vertices_to_keep):
     return updated_faces
 
 class Renderer(nn.Module):
-    def __init__(self, render_full_head=False, obj_filename='assets/head_template.obj'):
+    def __init__(self, render_full_head=False, assets_path="assets/"):
         super(Renderer, self).__init__()
         self.image_size = 224
 
+        obj_filename = join(assets_path, "head_template.obj")
+
         verts, faces, aux = load_obj(obj_filename)
         uvcoords = aux.verts_uvs[None, ...]      # (N, V, 2)
         uvfaces = faces.textures_idx[None, ...] # (N, F, 3)
@@ -63,7 +66,7 @@ class Renderer(nn.Module):
         colors = torch.tensor([180, 180, 180])[None, None, :].repeat(1, faces.max()+1, 1).float()/255.
 
         flame_masks = pickle.load(
-            open('assets/FLAME_masks/FLAME_masks.pkl', 'rb'),
+            open(join(assets_path, "FLAME_masks/FLAME_masks.pkl"), 'rb'),
             encoding='latin1')
         self.flame_masks = flame_masks
 
